import{_ as t,c as a,o,l as e,a as r}from"./chunks/framework.BM2i9-bh.js";const v=JSON.parse('{"title":"MVVM原理","description":"","frontmatter":{},"headers":[],"relativePath":"src/知识库/vue2篇/index3.md","filePath":"src/知识库/vue2篇/index3.md"}'),s={name:"src/知识库/vue2篇/index3.md"},c=e("h1",{id:"mvvm原理",tabindex:"-1"},[r("MVVM原理 "),e("a",{class:"header-anchor",href:"#mvvm原理","aria-label":'Permalink to "MVVM原理"'},"​")],-1),d=e("p",null,"MVVM（Model-View-ViewModel）是一种软件架构模式，其中 Model 表示应用程序的数据模型，View 表示用户界面，而 ViewModel 则充当 Model 和 View 之间的中介，处理数据的交互和业务逻辑。在前端框架中，MVVM 常常用于实现数据绑定，其中 Observer（观察者）用于监测数据变化，Compile（编译器）用于解析模板并创建 Watcher（观察者），Watcher 负责更新视图。",-1),i=[c,d];function n(l,V,_,m,M,h){return o(),a("div",null,i)}const f=t(s,[["render",n]]);export{v as __pageData,f as default};
