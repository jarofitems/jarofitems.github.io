import{_ as i,c as o,o as t,a3 as a}from"./chunks/framework.BM2i9-bh.js";const h=JSON.parse('{"title":"OptionsAPI 与 CompositionAPI 的区别","description":"","frontmatter":{},"headers":[],"relativePath":"src/知识库/vue3/index9.md","filePath":"src/知识库/vue3/index9.md"}'),e={name:"src/知识库/vue3/index9.md"},l=a('<h1 id="optionsapi-与-compositionapi-的区别" tabindex="-1">OptionsAPI 与 CompositionAPI 的区别 <a class="header-anchor" href="#optionsapi-与-compositionapi-的区别" aria-label="Permalink to &quot;OptionsAPI 与 CompositionAPI 的区别&quot;">​</a></h1><h2 id="optionsapi" tabindex="-1">OptionsAPI： <a class="header-anchor" href="#optionsapi" aria-label="Permalink to &quot;OptionsAPI：&quot;">​</a></h2><ul><li>选项式API，通过定义data、computed、watch、method等属性与方法，共同处理页面逻辑；</li><li>缺点： <ul><li>当组件变得复杂的时候，导致对应属性的列表也会增长，可能会导致组件难以阅读和后期维护成本变高；</li></ul></li></ul><h2 id="compositionapi" tabindex="-1">CompositionAPI： <a class="header-anchor" href="#compositionapi" aria-label="Permalink to &quot;CompositionAPI：&quot;">​</a></h2><ul><li>组合式API，组件根据逻辑功能来组织，一个功能所定义的所有API会放在一起（高内聚，低耦合）；</li><li>优点： <ul><li>内部的功能容易碎片化，像某一个功能相关的数据放在一块，容易阅读和维护（不用翻来翻去找）；</li><li>将某个逻辑关注点相关的代码全都放在一个函数里，这样，当需要修改一个功能时，就不再需要在文件中跳来跳去；</li><li>逻辑复用： <ul><li>在Vue2中，当混入多个mixin会存在两个非常明显的问题：命名冲突，数据来源不清晰；</li><li>而组合式API可以通过编写多个函数就很好的解决了；</li></ul></li></ul></li></ul>',5),n=[l];function s(p,r,c,d,_,u){return t(),o("div",null,n)}const P=i(e,[["render",s]]);export{h as __pageData,P as default};
