import{_ as a,c as i,o as l,a3 as e}from"./chunks/framework.Dcugq_a2.js";const S=JSON.parse('{"title":"回流与重绘","description":"","frontmatter":{},"headers":[],"relativePath":"src/知识库/JS篇/index5.md","filePath":"src/知识库/JS篇/index5.md"}'),t={name:"src/知识库/JS篇/index5.md"},r=e('<h1 id="回流与重绘" tabindex="-1">回流与重绘 <a class="header-anchor" href="#回流与重绘" aria-label="Permalink to &quot;回流与重绘&quot;">​</a></h1><p>关于回流和重绘，需要先了解浏览器渲染页面的过程：</p><ul><li>解析HTML，生成DOM树，解析CSS，生成CSSOM样式结构体</li><li>将DOM树和CSSOM结合，生成渲染树(Render Tree)</li><li>Layout(回流):根据生成的渲染树，进行回流(Layout)，得到节点的几何信息（位置，大小）</li><li>Painting(重绘):根据渲染树以及回流得到的几何信息，得到节点的绝对像素</li><li>Display:将像素发送给GPU，展示在页面上。</li></ul><h2 id="什么是回流" tabindex="-1">什么是回流 <a class="header-anchor" href="#什么是回流" aria-label="Permalink to &quot;什么是回流&quot;">​</a></h2><p>当渲染树中的一部分（或全部）因为元素的规模尺寸，布局，隐藏等改变而需要重新构建的过程叫回流（改变大小、布局）</p><h2 id="什么是重绘" tabindex="-1">什么是重绘 <a class="header-anchor" href="#什么是重绘" aria-label="Permalink to &quot;什么是重绘&quot;">​</a></h2><p>当渲染树中的一部分元素需要更新属性，如改变元素的外观、风格，而不影响布局的重新渲染的过程叫重绘（改变样式） <strong>注意：</strong></p><ul><li>每个页面至少需要一次回流+重绘；</li><li>回流必将引起重绘，而重绘不一定会引起回流；</li></ul><h2 id="回流发生条件" tabindex="-1">回流发生条件 <a class="header-anchor" href="#回流发生条件" aria-label="Permalink to &quot;回流发生条件&quot;">​</a></h2><ul><li>页面首次渲染</li><li>浏览器窗口大小发生改变</li><li>元素尺寸或位置发生改变</li><li>元素内容变化（文字数量或图片大小等等）</li><li>元素字体大小变化</li><li>添加或者删除可见的DOM元素</li><li>激活CSS伪类（例如：:hover）</li><li>查询某些属性或调用某些方法</li></ul><h2 id="重绘发生条件" tabindex="-1">重绘发生条件 <a class="header-anchor" href="#重绘发生条件" aria-label="Permalink to &quot;重绘发生条件&quot;">​</a></h2><p>当页面中元素样式的改变并不影响它在文档流中的位置时（例如：color、background-color、visibility等），浏览器会将新样式赋予给元素并重新绘制它，这个过程称为重绘。</p><h2 id="性能影响" tabindex="-1">性能影响 <a class="header-anchor" href="#性能影响" aria-label="Permalink to &quot;性能影响&quot;">​</a></h2><p>回流比重绘的代价要更高。</p><h2 id="如何避免" tabindex="-1">如何避免 <a class="header-anchor" href="#如何避免" aria-label="Permalink to &quot;如何避免&quot;">​</a></h2><p><strong>CSS</strong></p><ul><li>避免使用table布局。</li><li>尽可能在DOM树的最末端改变class。</li><li>避免设置多层内联样式。</li><li>将动画效果应用到position属性为absolute或fixed的元素上。</li><li>避免使用CSS表达式（例如：calc()）。 <strong>JavaScript</strong></li><li>避免频繁操作样式，最好一次性重写style属性，或者将样式列表定义为class并一次性更改class属性。</li><li>避免频繁操作DOM，创建一个documentFragment，在它上面应用所有DOM操作，最后再把它添加到文档中。</li><li>也可以先为元素设置display: none，操作结束后再把它显示出来。因为在display属性为none的元素上进行的DOM操作不会引发回流和重绘。</li><li>避免频繁读取会引发回流/重绘的属性，如果确实需要多次使用，就用一个变量缓存起来。</li><li>对具有复杂动画的元素使用绝对定位，使它脱离文档流，否则会引起父元素及后续元素频繁回流。</li></ul>',17),o=[r];function n(s,c,d,h,u,p){return l(),i("div",null,o)}const b=a(t,[["render",n]]);export{S as __pageData,b as default};
