import{_ as i,c as a,o as s,a3 as e}from"./chunks/framework.BM2i9-bh.js";const E=JSON.parse('{"title":"常规","description":"","frontmatter":{},"headers":[],"relativePath":"src/知识库/vue2/index1.md","filePath":"src/知识库/vue2/index1.md"}'),l={name:"src/知识库/vue2/index1.md"},n=e(`<h1 id="常规" tabindex="-1">常规 <a class="header-anchor" href="#常规" aria-label="Permalink to &quot;常规&quot;">​</a></h1><h2 id="解决花括号问题" tabindex="-1">解决花括号问题 <a class="header-anchor" href="#解决花括号问题" aria-label="Permalink to &quot;解决花括号问题&quot;">​</a></h2><p>标签样式中加 v-cloak v-克楼克</p><p>在css中加</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">v-cloak</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">none</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !important</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="vue是什么" tabindex="-1">vue是什么 <a class="header-anchor" href="#vue是什么" aria-label="Permalink to &quot;vue是什么&quot;">​</a></h2><p>Vue是一款基于MVVM架构的渐进式框架，它主要用于构建单页面应用（spa），它的特点有声明式渲染、响应式两大点</p><h2 id="什么是响应式" tabindex="-1">什么是响应式 <a class="header-anchor" href="#什么是响应式" aria-label="Permalink to &quot;什么是响应式&quot;">​</a></h2><p>响应式就是在我们修改数据之后，无需手动触发视图更新，视图会自动更新。</p><h2 id="vue中data为什么是一个函数" tabindex="-1">vue中data为什么是一个函数 <a class="header-anchor" href="#vue中data为什么是一个函数" aria-label="Permalink to &quot;vue中data为什么是一个函数&quot;">​</a></h2><p>vue的data是一个函数的原因是，确保每一个vue组件的实例是唯一的，数据是不共享的，更容易维护的</p><h2 id="vue的优点-vue的缺点" tabindex="-1">Vue的优点? vue的缺点? <a class="header-anchor" href="#vue的优点-vue的缺点" aria-label="Permalink to &quot;Vue的优点? vue的缺点?&quot;">​</a></h2><p>优点: 渐进式，组件化，轻量级，虚拟dom，响应式，单页面路由，数据与视图分开 缺点: 单页面不利于seo，不支持IE8以下，首屏加载时间长</p><h2 id="v-if和v-show有何区别" tabindex="-1">v-if和v-show有何区别？ <a class="header-anchor" href="#v-if和v-show有何区别" aria-label="Permalink to &quot;v-if和v-show有何区别？&quot;">​</a></h2><p>核心：v-if 会导致 组件（dom）的重新渲染，但是 v-show 不会。</p><ul><li>v-if元素不可见，直接删除DOM，有更高的切换消耗。</li><li>v-show通过设置元素display: none控制显示隐藏，更高的初始渲染消耗。</li></ul><h2 id="为什么v-if和v-for不建议用在同一标签" tabindex="-1">为什么v-if和v-for不建议用在同一标签？ <a class="header-anchor" href="#为什么v-if和v-for不建议用在同一标签" aria-label="Permalink to &quot;为什么v-if和v-for不建议用在同一标签？&quot;">​</a></h2><ul><li>在Vue2中，v-for的优先级要高于v-if，但是在Vue3中，v-for的优先级要低于v-if。</li><li>在Vue2中，会先通过v-for遍历，然后对每一项使用v-if判断，不满足条件的不会渲染，但是这种方式并不好，相当于对很多个标签都添加了v-if，每次渲染之前都要判断。于是在Vue3中，v-if的优先级要高于v-for了，相当于在v-for外层包裹了一层，但是这时的判断条件肯定是错的，因此在vue3中同一标签使用v-for和v-if时，会报错。</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">li v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tod in tods&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-if=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tod.name!=&#39;&#39;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {{tod.name}}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">li</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>在外面包裹一层<code>&lt;template&gt;</code> 再在其上使用v-for 可以解决这个问题</p><h2 id="computed-康pu-来的-和watch-喔企-的区别" tabindex="-1">computed(康pu 来的) 和watch(喔企)的区别 <a class="header-anchor" href="#computed-康pu-来的-和watch-喔企-的区别" aria-label="Permalink to &quot;computed(康pu 来的) 和watch(喔企)的区别&quot;">​</a></h2><ul><li>1、computed 默认执行一次，watch默认不会执行</li><li>2、computed 支持缓存，只有依赖数据发生改变，才会重新进行计算；watch 不支持缓存，数据变，直接会触发相应的操作</li><li>3、computed 不支持异步，当computed内有异步操作时无效，无法监听数据的变化；watch 支持异步</li></ul><h2 id="为什么不建议用index做key-为什么不建议用随机数做key" tabindex="-1">为什么不建议用index做key，为什么不建议用随机数做key？ <a class="header-anchor" href="#为什么不建议用index做key-为什么不建议用随机数做key" aria-label="Permalink to &quot;为什么不建议用index做key，为什么不建议用随机数做key？&quot;">​</a></h2><p>用index和用随机数都是同理，随机数每次都在变，做不到专一性，也很消耗性能</p><h2 id="nexttick-莱克斯-特克-的使用场景和原理" tabindex="-1">nextTick(莱克斯 特克) 的使用场景和原理 <a class="header-anchor" href="#nexttick-莱克斯-特克-的使用场景和原理" aria-label="Permalink to &quot;nextTick(莱克斯 特克) 的使用场景和原理&quot;">​</a></h2><h3 id="场景" tabindex="-1">场景 <a class="header-anchor" href="#场景" aria-label="Permalink to &quot;场景&quot;">​</a></h3><p>nextTick 是在下次 DOM 更新循环结束之后执行的一个方法。一般在修改数据之后使用这个方法操作更新后的 DOM。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello Vue!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    example</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 修改数据</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;changed&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // DOM 尚未更新</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // DOM 现在更新了</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;DOM 现在更新了&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">​</a></h3><p>在 Vue2 当中，nextTick 可以理解为就是收集异步任务到队列当中并且开启异步任务去执行它们。它可以同时收集组件渲染的任务，以及用户手动放入的任务。组件渲染的任务是由 watcher 的 update 触发，并且将回调函数包装为异步任务，最后推到 nextTick 的队列里，等待执行。</p><p>而在 Vue3 当中，nextTick 则是利用 promise 的链式调用，将用户放入的回调放在更新视图之后的 then 里面调用，用户调用多少次 nextTick，就接着多少个 then。</p><h2 id="vue有那些性能优化" tabindex="-1">Vue有那些性能优化 <a class="header-anchor" href="#vue有那些性能优化" aria-label="Permalink to &quot;Vue有那些性能优化&quot;">​</a></h2><p><strong>编码阶段</strong></p><ul><li>v-if和v-for不一起使用</li><li>v-for保证key的唯一性</li><li>使用keep-alive缓存组件</li><li>v-if和v-show酌情使用</li><li>路由懒加载、异步组件</li><li>图片懒加载</li><li>节流防抖</li><li>第三方模块按需引入</li><li>服务端与渲染</li></ul><p><strong>打包优化</strong></p><ul><li>压缩代码</li><li>使用CDN加载第三方模块</li><li>抽离公共文件</li></ul><p><strong>用户体验</strong></p><ul><li>骨架屏</li><li>客户端缓存</li></ul><p><strong>SEO优化</strong></p><ul><li>预渲染</li><li>服务端渲染</li><li>合理使用 meta 标签</li></ul><h2 id="nexttick的使用和原理" tabindex="-1">nextTick的使用和原理？ <a class="header-anchor" href="#nexttick的使用和原理" aria-label="Permalink to &quot;nextTick的使用和原理？&quot;">​</a></h2><p>功能：可以获取到更新后的DOM，nextTick返回一个Promise，是一个 异步行为。 因为vue采用的是异步更新策略，数据发生变化，DOM节点并不会立刻发生变化，而是开启一个队列，把组件更新函数保存在队列中，同一个事件循环中发生的所有数据变更会异步的批量更新。这一策略导致我们对数据的修改不能立刻的体现在DOM上，此时如果我们想获取更新后的DOM状态，就要使用nextTick。在开发时，一般两个场景用： 1、created中想要获取DOM时； 2、响应式数据变化后获取DOM更新后的状态</p><h2 id="v-model-是如何实现的-语法糖实际是什么" tabindex="-1">v-model 是如何实现的，语法糖实际是什么？ <a class="header-anchor" href="#v-model-是如何实现的-语法糖实际是什么" aria-label="Permalink to &quot;v-model 是如何实现的，语法糖实际是什么？&quot;">​</a></h2><p>Vue 中数据双向绑定是一个指令v-model，可以绑定一个响应式数据到视图，同时视图的变化能改变该值。</p><ul><li>当作用在表单上：通过v-bind:value绑定数据，v-on:input来监听数据变化并修改value</li><li>当作用在组件上：本质上是一个父子通信语法糖，通过props和$emit实现。</li></ul><h2 id="vue-mixin的使用场景" tabindex="-1">vue.mixin的使用场景 <a class="header-anchor" href="#vue-mixin的使用场景" aria-label="Permalink to &quot;vue.mixin的使用场景&quot;">​</a></h2><p>使用场景： Vue.mixin是一种混入（mix-in）技术，可以在多个组件之间共享组件选项，包括生命周期方法、data选项等等，使用Vue.mixin可以将一些通用的功能或逻辑封装起来，让多个组件可共同调用这些相同的逻辑，避免了冗余代码的出现。</p><h2 id="diff算法" tabindex="-1">diff算法 <a class="header-anchor" href="#diff算法" aria-label="Permalink to &quot;diff算法&quot;">​</a></h2><p>diff 算法是一种通过同层的树节点进行比较的高效算法 其有两个特点： 比较只会在同层级进行, 不会跨层级比较 在diff比较的过程中，循环从两边向中间比较 diff 算法在很多场景下都有应用，在 vue 中，作用于虚拟 dom 渲染成真实 dom 的新旧 VNode 节点比较 原理：当数据发生改变时，set方法会调用Dep.notify通知所有订阅者Watcher，订阅者就会调用patch给真实的DOM打补丁，更新相应的视图</p><h2 id="vue核心是什么-vue和jquey的区别-vue与react" tabindex="-1">vue核心是什么? vue和jquey的区别？vue与React <a class="header-anchor" href="#vue核心是什么-vue和jquey的区别-vue与react" aria-label="Permalink to &quot;vue核心是什么? vue和jquey的区别？vue与React&quot;">​</a></h2><p>vue最大特点我感觉就是“组件化“和”数据驱动“ 组件化就是可以将页面和页面中可复用的元素都看做成组件，写页面的过程，就是写组件，然后页面是由这些组件“拼接“起来的组件树 数据驱动就是让我们只关注数据层，只要数据变化，页面（即视图层）会自动更新，至于如何操作dom，完全交由vue去完成，咱们只关注数据，数据变了，页面自动同步变化了，很方便 jquery主要是玩dom操作的“神器“，强大的选择器,封装了好多好用的dom操作方法和如何获取ajax方法 例如：$.ajax（）非常好用 vue:主要用于数据驱动和组件化，很少操作dom，当然vue可能通过ref来选择一个dom或组件 vue与react： 相同点：数据驱动视图、组件化、都使用 Virtual DOM 不同点：核心思想不同、组件写法差异、diff算法不同、响应式原理不同</p><h2 id="sync修饰符" tabindex="-1">.sync修饰符 <a class="header-anchor" href="#sync修饰符" aria-label="Permalink to &quot;.sync修饰符&quot;">​</a></h2><p>.sync修饰符是v-bind:xxx和@update:xxx的语法糖，在Vue3中已被移除，使用v-model:xxx替代。</p>`,53),t=[n];function h(p,k,r,d,o,u){return s(),a("div",null,t)}const v=i(l,[["render",h]]);export{E as __pageData,v as default};
