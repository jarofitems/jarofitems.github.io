import{_ as s,c as i,o as a,a3 as t}from"./chunks/framework.BM2i9-bh.js";const u=JSON.parse('{"title":"Vue 是如何实现数据双向绑定的？v-model 的原理？","description":"","frontmatter":{},"headers":[],"relativePath":"src/知识库/vue2/index7.md","filePath":"src/知识库/vue2/index7.md"}'),e={name:"src/知识库/vue2/index7.md"},h=t('<h1 id="vue-是如何实现数据双向绑定的-v-model-的原理" tabindex="-1">Vue 是如何实现数据双向绑定的？v-model 的原理？ <a class="header-anchor" href="#vue-是如何实现数据双向绑定的-v-model-的原理" aria-label="Permalink to &quot;Vue 是如何实现数据双向绑定的？v-model 的原理？&quot;">​</a></h1><p>Vue 组件可以通过使用 v-model 指令以实现双向绑定。</p><p>v-model 是 vue 的一个语法糖，它用于监听数据的改变并将数据更新。以 input 元素为例：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><p>其实就等价于</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">searchText</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">searchText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $event.target.value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><p>Vue 通过数据劫持结合发布者-订阅者模式实现了双向绑定</p><p>vue实现双向绑定原理，主要是利用<strong>Object.defineProperty(滴坏的 破 婆儿 立)</strong> 来给实例data的属性添加 setter和getter. 并通过发布订阅模式（一对多的依赖关系，当状态发生改变，它的所有依赖都将被通知）来实现响应。</p>',8),n=[h];function p(l,k,d,r,E,o){return a(),i("div",null,n)}const g=s(e,[["render",p]]);export{u as __pageData,g as default};
