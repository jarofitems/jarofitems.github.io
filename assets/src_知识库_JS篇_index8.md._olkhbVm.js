import{_ as a,c as e,o as i,a3 as s}from"./chunks/framework.Dcugq_a2.js";const u=JSON.parse('{"title":"同源策略和跨域","description":"","frontmatter":{},"headers":[],"relativePath":"src/知识库/JS篇/index8.md","filePath":"src/知识库/JS篇/index8.md"}'),t={name:"src/知识库/JS篇/index8.md"},n=s('<h1 id="同源策略和跨域" tabindex="-1">同源策略和跨域 <a class="header-anchor" href="#同源策略和跨域" aria-label="Permalink to &quot;同源策略和跨域&quot;">​</a></h1><h2 id="什么是同源策略" tabindex="-1">什么是同源策略 <a class="header-anchor" href="#什么是同源策略" aria-label="Permalink to &quot;什么是同源策略&quot;">​</a></h2><p>协议相同，域名相同，端口相同</p><h2 id="跨域" tabindex="-1">跨域 <a class="header-anchor" href="#跨域" aria-label="Permalink to &quot;跨域&quot;">​</a></h2><p>当协议、域名、端口有任何一个不同，都被当作是不同的域，这就是所谓“跨域”</p><h2 id="跨域解决方案" tabindex="-1">跨域解决方案 <a class="header-anchor" href="#跨域解决方案" aria-label="Permalink to &quot;跨域解决方案&quot;">​</a></h2><h3 id="_1、jsonp" tabindex="-1">1、JSONP <a class="header-anchor" href="#_1、jsonp" aria-label="Permalink to &quot;1、JSONP&quot;">​</a></h3><p>利用script标签src属性来发送请求, 因为跨域只对ajax有限制,但是只能使用get请求 <strong>JSONP的优缺点：</strong> -优点 - 兼容性好，支持老的浏览器</p><ul><li>缺点 <ul><li>只支持get请求，因为script标签请求资源本质就是一个get请求</li><li>需要服务端专门配置，把数据用callback函数名包裹起来再返回</li></ul></li></ul><h3 id="_2、cors" tabindex="-1">2、CORS <a class="header-anchor" href="#_2、cors" aria-label="Permalink to &quot;2、CORS&quot;">​</a></h3><p>CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10 实现CORS通信的关键是服务器，需要服务器实现了CORS接口，最关键的步骤就是在响应头中配置Access-ControI-AIIow-Origin属性</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Access</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ControI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AIIow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Origin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:允许跨域访问的url</span></span></code></pre></div><h3 id="_3、nginx-反向代理" tabindex="-1">3、Nginx 反向代理 <a class="header-anchor" href="#_3、nginx-反向代理" aria-label="Permalink to &quot;3、Nginx 反向代理&quot;">​</a></h3><p>通过Nginx配置一个代理服务器域名与接口请求域名相同，来做跳板机实现跨域访问</p><h3 id="_4、websocket" tabindex="-1">4、WebSocket <a class="header-anchor" href="#_4、websocket" aria-label="Permalink to &quot;4、WebSocket&quot;">​</a></h3><p>WebSocket是一种通信协议，使用ws://（非加密）和wss://（加密）作为协议前缀。该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信。</p>',16),r=[n];function l(o,h,c,d,p,k){return i(),e("div",null,r)}const g=a(t,[["render",l]]);export{u as __pageData,g as default};
